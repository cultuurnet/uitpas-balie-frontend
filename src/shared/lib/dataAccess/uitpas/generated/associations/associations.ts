/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AssociationsPaginatedResponse,
  Error,
  ForbiddenResponse,
  GetAssociationsParams,
  UnauthorizedResponse
} from '.././model'



/**
 * Retrieve associations based on organizer and its permission on the specific association.

Passholders can have memberships for zero or more associations. However, only selected organizers can see (read permission) or register (write permission) these memberships. Using this endpoint, clients can retrieve which memberships they can [see](/reference/uitpas.json/paths/~1passholders~1passholderId~1association-memberships/get) or register.

The caller of this request must have `ASSOCIATIONS` permission for the given organizer.
 * @summary Get associations
 */
export const getAssociations = (
    params: GetAssociationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AssociationsPaginatedResponse>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/associations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAssociationsQueryKey = (params: GetAssociationsParams,) => {
    return [`NEXT_PUBLIC_API_PATH/associations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssociationsQueryOptions = <TData = Awaited<ReturnType<typeof getAssociations>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(params: GetAssociationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssociations>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssociationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssociations>>> = ({ signal }) => getAssociations(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssociations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAssociationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssociations>>>
export type GetAssociationsQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

/**
 * @summary Get associations
 */
export const useGetAssociations = <TData = Awaited<ReturnType<typeof getAssociations>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 params: GetAssociationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssociations>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAssociationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



