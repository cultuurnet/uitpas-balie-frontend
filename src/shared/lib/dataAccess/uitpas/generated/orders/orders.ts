/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Error,
  ForbiddenResponse,
  Order,
  UnauthorizedResponse
} from '.././model'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;




/**
 * Create an online order for one or more passholders.

This caller of this method, identified by client identification, client access token or user access token, must have ORDERS_CREATE permission.
 * @summary Create online order
 */
export const postOrders = (
    order: NonReadonly<Order>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    
    return axios.post(
      `NEXT_PUBLIC_API_PATH/orders`,
      order,options
    );
  }



export const getPostOrdersMutationOptions = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: NonReadonly<Order>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: NonReadonly<Order>}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrders>>, {data: NonReadonly<Order>}> = (props) => {
          const {data} = props ?? {};

          return  postOrders(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postOrders>>>
    export type PostOrdersMutationBody = NonReadonly<Order>
    export type PostOrdersMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    /**
 * @summary Create online order
 */
export const usePostOrders = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: NonReadonly<Order>}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postOrders>>,
        TError,
        {data: NonReadonly<Order>},
        TContext
      > => {

      const mutationOptions = getPostOrdersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve order by ID.

The caller of this method, identified by client identification, client access token or user access token, must have ORDERS_READ permission.

In case this order is retrieved using client identification, `mainPassholder` and `extraPassholders` are left out of the response.

This endpoint is rate limited.
 * @summary Retrieve order
 */
export const getOrdersOrderid = (
    orderId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/orders/${orderId}`,options
    );
  }


export const getGetOrdersOrderidQueryKey = (orderId: string,) => {
    return [`NEXT_PUBLIC_API_PATH/orders/${orderId}`] as const;
    }

    
export const getGetOrdersOrderidQueryOptions = <TData = Awaited<ReturnType<typeof getOrdersOrderid>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error | void>>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderid>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersOrderidQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrdersOrderid>>> = ({ signal }) => getOrdersOrderid(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderid>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOrdersOrderidQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersOrderid>>>
export type GetOrdersOrderidQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error | void>

/**
 * @summary Retrieve order
 */
export const useGetOrdersOrderid = <TData = Awaited<ReturnType<typeof getOrdersOrderid>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error | void>>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersOrderid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOrdersOrderidQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



