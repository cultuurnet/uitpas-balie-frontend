/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * UiTPAS API
 * With UiTPAS API 4.0 you can retrieve ticket prices and register ticket sales for passholders. You can also save UiTPAS points and exchange them for rewards for a passholder, and much more.
 * OpenAPI spec version: 4.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Error,
  ForbiddenResponse,
  KioskDevice,
  KioskDeviceCheckinRequest,
  KioskDeviceCheckinResponse,
  KioskDeviceEvent,
  KioskDeviceEventRequest,
  KioskDeviceSetup,
  KioskPass,
  UnauthorizedResponse
} from '.././model'



/**
 * Configure new kiosk device by looking it up by name and storing the provided device id. After this endpoint has been invoked, the other kiosk APIs can be used with the newly configured device id as `x-custom-token`.

In case no kiosk is found or the kiosk was already setup an error is returned:

* https://api.publiq.be/probs/uitpas/kiosk-not-found
* https://api.publiq.be/probs/uitpas/kiosk-already-configured

The **configuration code** of the device must be specicied in the `x-custom-token` header. This endpoint is rate limited to prevent abuse.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Setup new kiosk device
 */
export const putKiosksSetup = (
    kioskDeviceSetup: KioskDeviceSetup, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskDevice>> => {
    
    return axios.put(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/setup`,
      kioskDeviceSetup,options
    );
  }



export const getPutKiosksSetupMutationOptions = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putKiosksSetup>>, TError,{data: KioskDeviceSetup}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putKiosksSetup>>, TError,{data: KioskDeviceSetup}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putKiosksSetup>>, {data: KioskDeviceSetup}> = (props) => {
          const {data} = props ?? {};

          return  putKiosksSetup(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutKiosksSetupMutationResult = NonNullable<Awaited<ReturnType<typeof putKiosksSetup>>>
    export type PutKiosksSetupMutationBody = KioskDeviceSetup
    export type PutKiosksSetupMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    /**
 * @summary Setup new kiosk device
 */
export const usePutKiosksSetup = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putKiosksSetup>>, TError,{data: KioskDeviceSetup}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putKiosksSetup>>,
        TError,
        {data: KioskDeviceSetup},
        TContext
      > => {

      const mutationOptions = getPutKiosksSetupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve current kiosk.

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Retrieve kiosk
 */
export const getKiosks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskDevice>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/kiosk-devices`,options
    );
  }


export const getGetKiosksQueryKey = () => {
    return [`NEXT_PUBLIC_API_PATH/kiosk-devices`] as const;
    }

    
export const getGetKiosksQueryOptions = <TData = Awaited<ReturnType<typeof getKiosks>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosks>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKiosksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKiosks>>> = ({ signal }) => getKiosks({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKiosks>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKiosksQueryResult = NonNullable<Awaited<ReturnType<typeof getKiosks>>>
export type GetKiosksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse>

/**
 * @summary Retrieve kiosk
 */
export const useGetKiosks = <TData = Awaited<ReturnType<typeof getKiosks>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosks>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetKiosksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve the configured event of the kiosk.

This is a configuration endpoint, if you need to retrieve the **current** event, please use `GET /kiosk-devices/checkins`

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Retrieve configured event
 */
export const getKiosksEvent = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskDeviceEvent>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/events`,options
    );
  }


export const getGetKiosksEventQueryKey = () => {
    return [`NEXT_PUBLIC_API_PATH/kiosk-devices/events`] as const;
    }

    
export const getGetKiosksEventQueryOptions = <TData = Awaited<ReturnType<typeof getKiosksEvent>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksEvent>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKiosksEventQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKiosksEvent>>> = ({ signal }) => getKiosksEvent({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKiosksEvent>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKiosksEventQueryResult = NonNullable<Awaited<ReturnType<typeof getKiosksEvent>>>
export type GetKiosksEventQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

/**
 * @summary Retrieve configured event
 */
export const useGetKiosksEvent = <TData = Awaited<ReturnType<typeof getKiosksEvent>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksEvent>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetKiosksEventQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update the current event of the kiosk.

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Configure event
 */
export const putKiosksEvents = (
    kioskDeviceEventRequest: KioskDeviceEventRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/events`,
      kioskDeviceEventRequest,options
    );
  }



export const getPutKiosksEventsMutationOptions = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putKiosksEvents>>, TError,{data: KioskDeviceEventRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putKiosksEvents>>, TError,{data: KioskDeviceEventRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putKiosksEvents>>, {data: KioskDeviceEventRequest}> = (props) => {
          const {data} = props ?? {};

          return  putKiosksEvents(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutKiosksEventsMutationResult = NonNullable<Awaited<ReturnType<typeof putKiosksEvents>>>
    export type PutKiosksEventsMutationBody = KioskDeviceEventRequest
    export type PutKiosksEventsMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    /**
 * @summary Configure event
 */
export const usePutKiosksEvents = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putKiosksEvents>>, TError,{data: KioskDeviceEventRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putKiosksEvents>>,
        TError,
        {data: KioskDeviceEventRequest},
        TContext
      > => {

      const mutationOptions = getPutKiosksEventsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete configured event

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Delete configured event
 */
export const deleteKiosksEvents = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/events`,options
    );
  }



export const getDeleteKiosksEventsMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteKiosksEvents>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteKiosksEvents>>, TError,void, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteKiosksEvents>>, void> = () => {
          

          return  deleteKiosksEvents(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteKiosksEventsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteKiosksEvents>>>
    
    export type DeleteKiosksEventsMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse>

    /**
 * @summary Delete configured event
 */
export const useDeleteKiosksEvents = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteKiosksEvents>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteKiosksEvents>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteKiosksEventsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Checkin a passholder with the given NFC chipnumber at the kiosk.

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Checkin passholder via kiosk
 */
export const postKiosksCheckin = (
    kioskDeviceCheckinRequest: KioskDeviceCheckinRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskDeviceCheckinResponse>> => {
    
    return axios.post(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/checkins`,
      kioskDeviceCheckinRequest,options
    );
  }



export const getPostKiosksCheckinMutationOptions = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postKiosksCheckin>>, TError,{data: KioskDeviceCheckinRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postKiosksCheckin>>, TError,{data: KioskDeviceCheckinRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postKiosksCheckin>>, {data: KioskDeviceCheckinRequest}> = (props) => {
          const {data} = props ?? {};

          return  postKiosksCheckin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostKiosksCheckinMutationResult = NonNullable<Awaited<ReturnType<typeof postKiosksCheckin>>>
    export type PostKiosksCheckinMutationBody = KioskDeviceCheckinRequest
    export type PostKiosksCheckinMutationError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

    /**
 * @summary Checkin passholder via kiosk
 */
export const usePostKiosksCheckin = <TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postKiosksCheckin>>, TError,{data: KioskDeviceCheckinRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postKiosksCheckin>>,
        TError,
        {data: KioskDeviceCheckinRequest},
        TContext
      > => {

      const mutationOptions = getPostKiosksCheckinMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve the current event of the kiosk. When returned, checkin on this kiosk and event is allowed.

The following logic is being used to determine the current checkin event:
* is the event configured and is checkin currently allowed for that event? then use this event.
* otherwise, the most suitable event is autodetected based on the organizers and locations of the kiosk.

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Retrieve the current checkin event
 */
export const getKiosksCheckins = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskDeviceEvent>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/checkins`,options
    );
  }


export const getGetKiosksCheckinsQueryKey = () => {
    return [`NEXT_PUBLIC_API_PATH/kiosk-devices/checkins`] as const;
    }

    
export const getGetKiosksCheckinsQueryOptions = <TData = Awaited<ReturnType<typeof getKiosksCheckins>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksCheckins>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKiosksCheckinsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKiosksCheckins>>> = ({ signal }) => getKiosksCheckins({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKiosksCheckins>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKiosksCheckinsQueryResult = NonNullable<Awaited<ReturnType<typeof getKiosksCheckins>>>
export type GetKiosksCheckinsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>

/**
 * @summary Retrieve the current checkin event
 */
export const useGetKiosksCheckins = <TData = Awaited<ReturnType<typeof getKiosksCheckins>>, TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksCheckins>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetKiosksCheckinsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve total points of a passholder by chip number.

The device id of the kiosk must be specicied in the `x-custom-token` header.

<!-- theme: warning -->

> **This endpoint is exclusively for use by Kiosk devices themselves**. It cannot be used by other applications to manage the device.
 * @summary Retrieve total points of a passholder by chip number
 */
export const getKiosksChipNumbersChipNumber = (
    chipNumber: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<KioskPass>> => {
    
    return axios.get(
      `NEXT_PUBLIC_API_PATH/kiosk-devices/chip-numbers/${chipNumber}`,options
    );
  }


export const getGetKiosksChipNumbersChipNumberQueryKey = (chipNumber: string,) => {
    return [`NEXT_PUBLIC_API_PATH/kiosk-devices/chip-numbers/${chipNumber}`] as const;
    }

    
export const getGetKiosksChipNumbersChipNumberQueryOptions = <TData = Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(chipNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKiosksChipNumbersChipNumberQueryKey(chipNumber);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>> = ({ signal }) => getKiosksChipNumbersChipNumber(chipNumber, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(chipNumber), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>, TError, TData> & { queryKey: QueryKey }
}

export type GetKiosksChipNumbersChipNumberQueryResult = NonNullable<Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>>
export type GetKiosksChipNumbersChipNumberQueryError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>

/**
 * @summary Retrieve total points of a passholder by chip number
 */
export const useGetKiosksChipNumbersChipNumber = <TData = Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>, TError = AxiosError<Error | UnauthorizedResponse | ForbiddenResponse>>(
 chipNumber: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKiosksChipNumbersChipNumber>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetKiosksChipNumbersChipNumberQueryOptions(chipNumber,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



