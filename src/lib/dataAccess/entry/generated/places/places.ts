/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Entry API
 * With UiTdatabank's Entry API you can create new events, places and organizers, and add extra info to them with specific requests to add/update properties. For example there are operations to add a label, remove a label, add an image, and so on.
 * OpenAPI spec version: 3.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ForbiddenResponse,
  NotFoundResponse,
  PlaceAddressPut,
  PlaceAddressPut400,
  PlaceAvailableFromPut,
  PlaceAvailableFromPut400,
  PlaceBookingInfo,
  PlaceBookingInfoPut400,
  PlaceCalendarPut,
  PlaceCalendarPut400,
  PlaceCalendarSummaryGetParams,
  PlaceContactPointPut,
  PlaceContactPointPut400,
  PlaceDescriptionPut,
  PlaceDescriptionPut400,
  PlaceFacilitiesPut,
  PlaceFacilitiesPut400,
  PlaceImagePost,
  PlaceImagePut,
  PlaceImagePut400,
  PlaceImagesPost400,
  PlaceImportCreate201,
  PlaceImportCreate400,
  PlaceImportCreateBody,
  PlaceImportUpdate200,
  PlaceImportUpdate400,
  PlaceMainImagePut,
  PlaceMainImagePut400,
  PlaceMajorInfoPut400,
  PlaceMajorInfoPutBody,
  PlaceNamePut,
  PlaceNamePut400,
  PlacePost,
  PlacePost201,
  PlacePost400,
  PlacePost409,
  PlacePriceInfo,
  PlacePriceInfoPut400,
  PlacePut200,
  PlacePut400,
  PlaceStatus,
  PlaceStatusPut400,
  PlaceTypicalAgeRangePut,
  PlaceTypicalAgeRangePut400,
  PlaceVideosPatch,
  PlaceVideosPost,
  PlaceVideosPost200,
  PlaceVideosPost400,
  PlaceWithReadExample,
  PlaceWithWriteExample,
  PlaceWorkflowStatusPut,
  PlaceWorkflowStatusPut400,
  PlacesVideosPatch400,
  UnauthorizedResponse
} from '.././model'



/**
 * Creates a new place with the required properties and any additional optional properties.

By default, the new place will be editable and removable by the user or client that the access token used to perform this request belongs to. If you use a user access token, the user for which the token was obtained will see the new place in their dashboard in UiTdatabank and will be able to edit or remove it. If you use a client access token, only API requests with a token for the same client will be able to edit or remove it.

To ensure data integrity and avoid duplication within the system, each place must have a unique combination of the main language title and address.
 * @summary place - create
 */
export const placePost = (
    placePost: PlacePost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlacePost201>> => {
    
    return axios.post(
      `NEXT_PUBLIC_ENTRY_API_PATH/places`,
      placePost,options
    );
  }



export const getPlacePostMutationOptions = <TError = AxiosError<PlacePost400 | UnauthorizedResponse | ForbiddenResponse | PlacePost409>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePost>>, TError,{data: PlacePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placePost>>, TError,{data: PlacePost}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placePost>>, {data: PlacePost}> = (props) => {
          const {data} = props ?? {};

          return  placePost(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlacePostMutationResult = NonNullable<Awaited<ReturnType<typeof placePost>>>
    export type PlacePostMutationBody = PlacePost
    export type PlacePostMutationError = AxiosError<PlacePost400 | UnauthorizedResponse | ForbiddenResponse | PlacePost409>

    /**
 * @summary place - create
 */
export const usePlacePost = <TError = AxiosError<PlacePost400 | UnauthorizedResponse | ForbiddenResponse | PlacePost409>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePost>>, TError,{data: PlacePost}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlacePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Returns the details of the place for the given `placeId`.
 * @summary place - get
 */
export const placeGet = (
    placeId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaceWithReadExample>> => {
    
    return axios.get(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}`,options
    );
  }


export const getPlaceGetQueryKey = (placeId: string,) => {
    
    return [`NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}`] as const;
    }

    
export const getPlaceGetQueryOptions = <TData = Awaited<ReturnType<typeof placeGet>>, TError = AxiosError<NotFoundResponse>>(placeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof placeGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPlaceGetQueryKey(placeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof placeGet>>> = ({ signal }) => placeGet(placeId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(placeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof placeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type PlaceGetQueryResult = NonNullable<Awaited<ReturnType<typeof placeGet>>>
export type PlaceGetQueryError = AxiosError<NotFoundResponse>

/**
 * @summary place - get
 */
export const usePlaceGet = <TData = Awaited<ReturnType<typeof placeGet>>, TError = AxiosError<NotFoundResponse>>(
 placeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof placeGet>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getPlaceGetQueryOptions(placeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Updates the place with the given `placeId` by completely overwriting it with the properties in the given JSON. 

<!-- theme: danger -->

> Any existing optional properties on the place that are not included in the update request will be removed from the place when updating the place via this operation.
>
> As an exception, some existing `labels` or `hiddenLabels` may be kept on the place even if they are not included in the update request. For example if they were added via the UiTdatabank UI, or if the client or user making the request does not have sufficient permission to remove some specific labels.
 * @summary place - update
 */
export const placePut = (
    placeId: string,
    placeWithWriteExample: PlaceWithWriteExample, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlacePut200>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}`,
      placeWithWriteExample,options
    );
  }



export const getPlacePutMutationOptions = <TError = AxiosError<PlacePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePut>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placePut>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placePut>>, {placeId: string;data: PlaceWithWriteExample}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placePut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlacePutMutationResult = NonNullable<Awaited<ReturnType<typeof placePut>>>
    export type PlacePutMutationBody = PlaceWithWriteExample
    export type PlacePutMutationError = AxiosError<PlacePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary place - update
 */
export const usePlacePut = <TError = AxiosError<PlacePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePut>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlacePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Does a soft-delete of the place. The place will continue to exist but it's `workflowStatus` will be changed to `DELETED`. This will remove it from all publication channels.
 * @summary place - delete
 */
export const placeDelete = (
    placeId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}`,options
    );
  }



export const getPlaceDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDelete>>, TError,{placeId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeDelete>>, TError,{placeId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeDelete>>, {placeId: string}> = (props) => {
          const {placeId} = props ?? {};

          return  placeDelete(placeId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeDelete>>>
    
    export type PlaceDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary place - delete
 */
export const usePlaceDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDelete>>, TError,{placeId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Creates a new place via the historical `/imports/places` URL.

<!-- theme: danger -->

> This operation is deprecated and should not be used in new integrations. Use the [`POST /places`](./entry.json/paths/~1places/post) operation instead to create new places.
>
> Both operations accept the same JSON bodies nowadays, and support creating places with only the required properties or with additional optional properties.
>
> The only difference is that the default `workflowStatus` for places created via [`POST /places`](./entry.json/paths/~1places/post) is `DRAFT`, while new places created via this `POST /imports/places` operation will have the default workflowStatus `READY_FOR_VALIDATION` for backward compatibility with historical integrations.
>
> If you want your new places to also have the workflowStatus `READY_FOR_VALIDATION`, you can use the [`POST /places`](./entry.json/paths/~1places/post) operation and explicitly set the `workflowStatus` property in your JSON body to `READY_FOR_VALIDATION`.
 * @deprecated
 * @summary place - import (create)
 */
export const placeImportCreate = (
    placeImportCreateBody: PlaceImportCreateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaceImportCreate201>> => {
    
    return axios.post(
      `NEXT_PUBLIC_ENTRY_API_PATH/imports/places`,
      placeImportCreateBody,options
    );
  }



export const getPlaceImportCreateMutationOptions = <TError = AxiosError<PlaceImportCreate400 | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImportCreate>>, TError,{data: PlaceImportCreateBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeImportCreate>>, TError,{data: PlaceImportCreateBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeImportCreate>>, {data: PlaceImportCreateBody}> = (props) => {
          const {data} = props ?? {};

          return  placeImportCreate(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceImportCreateMutationResult = NonNullable<Awaited<ReturnType<typeof placeImportCreate>>>
    export type PlaceImportCreateMutationBody = PlaceImportCreateBody
    export type PlaceImportCreateMutationError = AxiosError<PlaceImportCreate400 | UnauthorizedResponse | ForbiddenResponse>

    /**
 * @deprecated
 * @summary place - import (create)
 */
export const usePlaceImportCreate = <TError = AxiosError<PlaceImportCreate400 | UnauthorizedResponse | ForbiddenResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImportCreate>>, TError,{data: PlaceImportCreateBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceImportCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the place via the historical `/imports/places/{placeId}` URL by completely overwriting it with the properties in the given JSON. 

<!-- theme: danger -->

> This operation is deprecated and should not be used in new integrations. Use the [`PUT /places/{placeId}`](./entry.json/paths/~1places~1{placeId}/put) operation instead to update existing places, which accepts exactly the same JSON body.
 * @deprecated
 * @summary place - import (update)
 */
export const placeImportUpdate = (
    placeId: string,
    placeWithWriteExample: PlaceWithWriteExample, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaceImportUpdate200>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/imports/places/${placeId}`,
      placeWithWriteExample,options
    );
  }



export const getPlaceImportUpdateMutationOptions = <TError = AxiosError<PlaceImportUpdate400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImportUpdate>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeImportUpdate>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeImportUpdate>>, {placeId: string;data: PlaceWithWriteExample}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeImportUpdate(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceImportUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof placeImportUpdate>>>
    export type PlaceImportUpdateMutationBody = PlaceWithWriteExample
    export type PlaceImportUpdateMutationError = AxiosError<PlaceImportUpdate400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @deprecated
 * @summary place - import (update)
 */
export const usePlaceImportUpdate = <TError = AxiosError<PlaceImportUpdate400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImportUpdate>>, TError,{placeId: string;data: PlaceWithWriteExample}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceImportUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the address of a place.
 * @summary address - update
 */
export const placeAddressPut = (
    placeId: string,
    language: 'nl' | 'fr' | 'en' | 'de',
    placeAddressPut: PlaceAddressPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/address/${language}`,
      placeAddressPut,options
    );
  }



export const getPlaceAddressPutMutationOptions = <TError = AxiosError<PlaceAddressPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeAddressPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceAddressPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeAddressPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceAddressPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeAddressPut>>, {placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceAddressPut}> = (props) => {
          const {placeId,language,data} = props ?? {};

          return  placeAddressPut(placeId,language,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceAddressPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeAddressPut>>>
    export type PlaceAddressPutMutationBody = PlaceAddressPut
    export type PlaceAddressPutMutationError = AxiosError<PlaceAddressPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary address - update
 */
export const usePlaceAddressPut = <TError = AxiosError<PlaceAddressPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeAddressPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceAddressPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceAddressPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the availableFrom of the place. This is the first date & time that the place is allowed to be visible on publication channels.
 * @summary availableFrom - update
 */
export const placeAvailableFromPut = (
    placeId: string,
    placeAvailableFromPut: PlaceAvailableFromPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/available-from`,
      placeAvailableFromPut,options
    );
  }



export const getPlaceAvailableFromPutMutationOptions = <TError = AxiosError<PlaceAvailableFromPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeAvailableFromPut>>, TError,{placeId: string;data: PlaceAvailableFromPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeAvailableFromPut>>, TError,{placeId: string;data: PlaceAvailableFromPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeAvailableFromPut>>, {placeId: string;data: PlaceAvailableFromPut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeAvailableFromPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceAvailableFromPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeAvailableFromPut>>>
    export type PlaceAvailableFromPutMutationBody = PlaceAvailableFromPut
    export type PlaceAvailableFromPutMutationError = AxiosError<PlaceAvailableFromPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary availableFrom - update
 */
export const usePlaceAvailableFromPut = <TError = AxiosError<PlaceAvailableFromPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeAvailableFromPut>>, TError,{placeId: string;data: PlaceAvailableFromPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceAvailableFromPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the bookingInfo for a place.

<!-- theme: info -->

> There is no DELETE endpoint. To remove (specific) bookingInfo perform a PUT request with empty properties.
 * @summary bookingInfo - update
 */
export const placeBookingInfoPut = (
    placeId: string,
    placeBookingInfo: PlaceBookingInfo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/booking-info`,
      placeBookingInfo,options
    );
  }



export const getPlaceBookingInfoPutMutationOptions = <TError = AxiosError<PlaceBookingInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeBookingInfoPut>>, TError,{placeId: string;data: PlaceBookingInfo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeBookingInfoPut>>, TError,{placeId: string;data: PlaceBookingInfo}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeBookingInfoPut>>, {placeId: string;data: PlaceBookingInfo}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeBookingInfoPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceBookingInfoPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeBookingInfoPut>>>
    export type PlaceBookingInfoPutMutationBody = PlaceBookingInfo
    export type PlaceBookingInfoPutMutationError = AxiosError<PlaceBookingInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary bookingInfo - update
 */
export const usePlaceBookingInfoPut = <TError = AxiosError<PlaceBookingInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeBookingInfoPut>>, TError,{placeId: string;data: PlaceBookingInfo}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceBookingInfoPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the calendar information of the given `placeId`. The calendar information will be completely replaced with the new one.

The required properties depend on the `calendarType` property.

| calendarType  | required  | optional  |
|---|---|---|
| periodic  | startDate, endDate  | openingHours, status, bookingAvailability  |
| permanent  |   | openingHours, status, bookingAvailability  |

<!-- theme: warning -->

> If the event has a `status` or `bookingAvailability` that is not `Available`, and you do not include this `status` or `bookingAvailability` in the new calendar information, they will get reverted back to the default `Available`!

<!-- theme: danger -->

> Contrary to events, places cannot use calendarType `single` or `multiple`!
 * @summary calendar - update
 */
export const placeCalendarPut = (
    placeId: string,
    placeCalendarPut: PlaceCalendarPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/calendar`,
      placeCalendarPut,options
    );
  }



export const getPlaceCalendarPutMutationOptions = <TError = AxiosError<PlaceCalendarPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeCalendarPut>>, TError,{placeId: string;data: PlaceCalendarPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeCalendarPut>>, TError,{placeId: string;data: PlaceCalendarPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeCalendarPut>>, {placeId: string;data: PlaceCalendarPut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeCalendarPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceCalendarPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeCalendarPut>>>
    export type PlaceCalendarPutMutationBody = PlaceCalendarPut
    export type PlaceCalendarPutMutationError = AxiosError<PlaceCalendarPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary calendar - update
 */
export const usePlaceCalendarPut = <TError = AxiosError<PlaceCalendarPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeCalendarPut>>, TError,{placeId: string;data: PlaceCalendarPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceCalendarPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Returns a human-readable summary of the calendar information of the place. Can be configured to return either plain text or HTML, and to switch between four different formats depending on the amount of space you have to display it.

> For backward compatibility this endpoint is also accessible at the old abbreviated `/places/{placeId}/calsum` path.
 * @summary calendar summary - get
 */
export const placeCalendarSummaryGet = (
    placeId: string,
    params?: PlaceCalendarSummaryGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.get(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/calendar-summary`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getPlaceCalendarSummaryGetQueryKey = (placeId: string,
    params?: PlaceCalendarSummaryGetParams,) => {
    
    return [`NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/calendar-summary`, ...(params ? [params]: [])] as const;
    }

    
export const getPlaceCalendarSummaryGetQueryOptions = <TData = Awaited<ReturnType<typeof placeCalendarSummaryGet>>, TError = AxiosError<NotFoundResponse>>(placeId: string,
    params?: PlaceCalendarSummaryGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof placeCalendarSummaryGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPlaceCalendarSummaryGetQueryKey(placeId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof placeCalendarSummaryGet>>> = ({ signal }) => placeCalendarSummaryGet(placeId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(placeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof placeCalendarSummaryGet>>, TError, TData> & { queryKey: QueryKey }
}

export type PlaceCalendarSummaryGetQueryResult = NonNullable<Awaited<ReturnType<typeof placeCalendarSummaryGet>>>
export type PlaceCalendarSummaryGetQueryError = AxiosError<NotFoundResponse>

/**
 * @summary calendar summary - get
 */
export const usePlaceCalendarSummaryGet = <TData = Awaited<ReturnType<typeof placeCalendarSummaryGet>>, TError = AxiosError<NotFoundResponse>>(
 placeId: string,
    params?: PlaceCalendarSummaryGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof placeCalendarSummaryGet>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getPlaceCalendarSummaryGetQueryOptions(placeId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Updates the contact point information of the place with the given `placeId`.

<!-- theme: info -->

> There is no DELETE endpoint. To remove contact information perform a PUT request with empty properties.

<!-- theme: warning -->

> Unlike [`PUT /organizers/{organizerId}/contact-point`](./entry.json/paths/~1organizers~1{organizerId}~1contact-point/put), all properties are required. There is also no partial updating.
 * @summary contactPoint - update
 */
export const placeContactPointPut = (
    placeId: string,
    placeContactPointPut: PlaceContactPointPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/contact-point`,
      placeContactPointPut,options
    );
  }



export const getPlaceContactPointPutMutationOptions = <TError = AxiosError<PlaceContactPointPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeContactPointPut>>, TError,{placeId: string;data: PlaceContactPointPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeContactPointPut>>, TError,{placeId: string;data: PlaceContactPointPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeContactPointPut>>, {placeId: string;data: PlaceContactPointPut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeContactPointPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceContactPointPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeContactPointPut>>>
    export type PlaceContactPointPutMutationBody = PlaceContactPointPut
    export type PlaceContactPointPutMutationError = AxiosError<PlaceContactPointPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary contactPoint - update
 */
export const usePlaceContactPointPut = <TError = AxiosError<PlaceContactPointPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeContactPointPut>>, TError,{placeId: string;data: PlaceContactPointPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceContactPointPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the localized description of a place based on the given `placeId` and `language` inside the URL. The description is not limited in size, but it is recommended to use the first 200 characters of the description for promotional copy as these characters are visible in the list-view of results.

<!-- theme: info -->

> Keep in mind: 
> - The description should be UTF-8 encoded 
> - Linebreaks are encoded as `\n`

<!-- theme: info -->
 * @summary description - update
 */
export const placeDescriptionPut = (
    placeId: string,
    language: 'nl' | 'fr' | 'en' | 'de',
    placeDescriptionPut: PlaceDescriptionPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/description/${language}`,
      placeDescriptionPut,options
    );
  }



export const getPlaceDescriptionPutMutationOptions = <TError = AxiosError<PlaceDescriptionPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceDescriptionPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceDescriptionPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeDescriptionPut>>, {placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceDescriptionPut}> = (props) => {
          const {placeId,language,data} = props ?? {};

          return  placeDescriptionPut(placeId,language,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceDescriptionPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeDescriptionPut>>>
    export type PlaceDescriptionPutMutationBody = PlaceDescriptionPut
    export type PlaceDescriptionPutMutationError = AxiosError<PlaceDescriptionPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary description - update
 */
export const usePlaceDescriptionPut = <TError = AxiosError<PlaceDescriptionPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionPut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceDescriptionPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceDescriptionPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Deletes the localized description of a place based on the given `placeId` and `language` inside the URL. 

<!-- theme: info -->
 * @summary description - delete
 */
export const placeDescriptionDelete = (
    placeId: string,
    language: 'nl' | 'fr' | 'en' | 'de', options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/description/${language}`,options
    );
  }



export const getPlaceDescriptionDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionDelete>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de'}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionDelete>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de'}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeDescriptionDelete>>, {placeId: string;language: 'nl' | 'fr' | 'en' | 'de'}> = (props) => {
          const {placeId,language} = props ?? {};

          return  placeDescriptionDelete(placeId,language,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceDescriptionDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeDescriptionDelete>>>
    
    export type PlaceDescriptionDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary description - delete
 */
export const usePlaceDescriptionDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeDescriptionDelete>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de'}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceDescriptionDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the list of available (accessibility) facilities on the place. These will show up in the [place's `terms`](/models/place-terms.json).

A list of possible facilities can be found using our [guide about taxonomy terms](../docs/taxonomy-api/terms.md).

**Note**: A special permission is required to update an place's facilities in UiTdatabank, even if you are the place owner. Contact an administrator for further information.
 * @summary facilities - update
 */
export const placeFacilitiesPut = (
    placeId: string,
    placeFacilitiesPut: PlaceFacilitiesPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/facilities`,
      placeFacilitiesPut,options
    );
  }



export const getPlaceFacilitiesPutMutationOptions = <TError = AxiosError<PlaceFacilitiesPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeFacilitiesPut>>, TError,{placeId: string;data: PlaceFacilitiesPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeFacilitiesPut>>, TError,{placeId: string;data: PlaceFacilitiesPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeFacilitiesPut>>, {placeId: string;data: PlaceFacilitiesPut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeFacilitiesPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceFacilitiesPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeFacilitiesPut>>>
    export type PlaceFacilitiesPutMutationBody = PlaceFacilitiesPut
    export type PlaceFacilitiesPutMutationError = AxiosError<PlaceFacilitiesPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary facilities - update
 */
export const usePlaceFacilitiesPut = <TError = AxiosError<PlaceFacilitiesPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeFacilitiesPut>>, TError,{placeId: string;data: PlaceFacilitiesPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceFacilitiesPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Adds an image to a place. To upload an image, use the [`POST /images`](./entry.json/paths/~1images/post) endpoint.
 * @summary images - add
 */
export const placeImagesPost = (
    placeId: string,
    placeImagePost: PlaceImagePost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/images`,
      placeImagePost,options
    );
  }



export const getPlaceImagesPostMutationOptions = <TError = AxiosError<PlaceImagesPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImagesPost>>, TError,{placeId: string;data: PlaceImagePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeImagesPost>>, TError,{placeId: string;data: PlaceImagePost}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeImagesPost>>, {placeId: string;data: PlaceImagePost}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeImagesPost(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceImagesPostMutationResult = NonNullable<Awaited<ReturnType<typeof placeImagesPost>>>
    export type PlaceImagesPostMutationBody = PlaceImagePost
    export type PlaceImagesPostMutationError = AxiosError<PlaceImagesPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary images - add
 */
export const usePlaceImagesPost = <TError = AxiosError<PlaceImagesPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImagesPost>>, TError,{placeId: string;data: PlaceImagePost}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceImagesPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Removes the image with the given `imageId` from the place's `mediaObject` property.
 * @summary images - delete
 */
export const placeImageDelete = (
    placeId: string,
    imageId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/images/${imageId}`,options
    );
  }



export const getPlaceImageDeleteMutationOptions = <TError = AxiosError<ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImageDelete>>, TError,{placeId: string;imageId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeImageDelete>>, TError,{placeId: string;imageId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeImageDelete>>, {placeId: string;imageId: string}> = (props) => {
          const {placeId,imageId} = props ?? {};

          return  placeImageDelete(placeId,imageId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceImageDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeImageDelete>>>
    
    export type PlaceImageDeleteMutationError = AxiosError<ForbiddenResponse | NotFoundResponse>

    /**
 * @summary images - delete
 */
export const usePlaceImageDelete = <TError = AxiosError<ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImageDelete>>, TError,{placeId: string;imageId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceImageDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the metadata of an image on a place.
 * @summary images - update
 */
export const placeImagePut = (
    placeId: string,
    imageId: string,
    placeImagePut: PlaceImagePut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/images/${imageId}`,
      placeImagePut,options
    );
  }



export const getPlaceImagePutMutationOptions = <TError = AxiosError<PlaceImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImagePut>>, TError,{placeId: string;imageId: string;data: PlaceImagePut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeImagePut>>, TError,{placeId: string;imageId: string;data: PlaceImagePut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeImagePut>>, {placeId: string;imageId: string;data: PlaceImagePut}> = (props) => {
          const {placeId,imageId,data} = props ?? {};

          return  placeImagePut(placeId,imageId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceImagePutMutationResult = NonNullable<Awaited<ReturnType<typeof placeImagePut>>>
    export type PlaceImagePutMutationBody = PlaceImagePut
    export type PlaceImagePutMutationError = AxiosError<PlaceImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary images - update
 */
export const usePlaceImagePut = <TError = AxiosError<PlaceImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeImagePut>>, TError,{placeId: string;imageId: string;data: PlaceImagePut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceImagePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the main image of a place. The main image is the only image shown in search-result listviews and the image more prominently displayed on place-details, when the place has multiple images.
 * @summary images main - update
 */
export const placeMainImagePut = (
    placeId: string,
    placeMainImagePut: PlaceMainImagePut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/images/main`,
      placeMainImagePut,options
    );
  }



export const getPlaceMainImagePutMutationOptions = <TError = AxiosError<PlaceMainImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeMainImagePut>>, TError,{placeId: string;data: PlaceMainImagePut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeMainImagePut>>, TError,{placeId: string;data: PlaceMainImagePut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeMainImagePut>>, {placeId: string;data: PlaceMainImagePut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeMainImagePut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceMainImagePutMutationResult = NonNullable<Awaited<ReturnType<typeof placeMainImagePut>>>
    export type PlaceMainImagePutMutationBody = PlaceMainImagePut
    export type PlaceMainImagePutMutationError = AxiosError<PlaceMainImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary images main - update
 */
export const usePlaceMainImagePut = <TError = AxiosError<PlaceMainImagePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeMainImagePut>>, TError,{placeId: string;data: PlaceMainImagePut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceMainImagePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Adds the given label to the place with the given `placeId`.

If the specified label does not exist yet in UiTdatabank a new label will be created with default visibility and public permissions (usable by anyone), and linked to the place.

The label must be longer than 1 character and shorter than 255 characters. The label can also not contain the semicolon character. It should match the regex `^(?=.{2,255}$)(?=.*\S.*\S.*)[^;]*$`
 * @summary labels - add
 */
export const placesLabelsAdd = (
    placeId: string,
    labelName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/labels/${labelName}`,undefined,options
    );
  }



export const getPlacesLabelsAddMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placesLabelsAdd>>, TError,{placeId: string;labelName: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placesLabelsAdd>>, TError,{placeId: string;labelName: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placesLabelsAdd>>, {placeId: string;labelName: string}> = (props) => {
          const {placeId,labelName} = props ?? {};

          return  placesLabelsAdd(placeId,labelName,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlacesLabelsAddMutationResult = NonNullable<Awaited<ReturnType<typeof placesLabelsAdd>>>
    
    export type PlacesLabelsAddMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary labels - add
 */
export const usePlacesLabelsAdd = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placesLabelsAdd>>, TError,{placeId: string;labelName: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlacesLabelsAddMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Deletes a label from the `labels` or `hiddenLabels` property on an place based on the place id, the label name, and the label's visibility.
 * @summary labels - delete
 */
export const placeLabelsDelete = (
    placeId: string,
    labelName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/labels/${labelName}`,options
    );
  }



export const getPlaceLabelsDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeLabelsDelete>>, TError,{placeId: string;labelName: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeLabelsDelete>>, TError,{placeId: string;labelName: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeLabelsDelete>>, {placeId: string;labelName: string}> = (props) => {
          const {placeId,labelName} = props ?? {};

          return  placeLabelsDelete(placeId,labelName,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceLabelsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeLabelsDelete>>>
    
    export type PlaceLabelsDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary labels - delete
 */
export const usePlaceLabelsDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeLabelsDelete>>, TError,{placeId: string;labelName: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceLabelsDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * <!-- theme: danger -->

> The major-info endpoint is deprecated and should not be used in new integrations!

Updates the "major info" of the event with the given `placeId`.

The major info contains:

* `name`: The name of the place in the place's `mainLanguage`, as a string
* `type`: Id of the place's `eventtype` taxonomy `term`, as a string
* `theme` (optional): Id of the place's `theme` taxonomy `term`, as a string
* `address`: Object with the address of the place (see schema below)
* `calendar`: Object with the place's calendar information (see schema below)

All properties are required (except for `theme`) and will overwrite existing values of these properties on the place. If the place has a `theme` `term` before this update, but there is no `theme` in this major-info update, the `theme` will be removed.

<!-- theme: success -->
> For backward-compatibility with older integrations, this operation can also be requested via `POST /place/{placeId}/major-info`
 * @deprecated
 * @summary major-info - update
 */
export const placeMajorInfoPut = (
    placeId: string,
    placeMajorInfoPutBody: PlaceMajorInfoPutBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/major-info`,
      placeMajorInfoPutBody,options
    );
  }



export const getPlaceMajorInfoPutMutationOptions = <TError = AxiosError<PlaceMajorInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeMajorInfoPut>>, TError,{placeId: string;data: PlaceMajorInfoPutBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeMajorInfoPut>>, TError,{placeId: string;data: PlaceMajorInfoPutBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeMajorInfoPut>>, {placeId: string;data: PlaceMajorInfoPutBody}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeMajorInfoPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceMajorInfoPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeMajorInfoPut>>>
    export type PlaceMajorInfoPutMutationBody = PlaceMajorInfoPutBody
    export type PlaceMajorInfoPutMutationError = AxiosError<PlaceMajorInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @deprecated
 * @summary major-info - update
 */
export const usePlaceMajorInfoPut = <TError = AxiosError<PlaceMajorInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeMajorInfoPut>>, TError,{placeId: string;data: PlaceMajorInfoPutBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceMajorInfoPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the localized name of a place based on the given `placeId` and `language` inside the URL.
 * @summary name - update
 */
export const placeNamePut = (
    placeId: string,
    language: 'nl' | 'fr' | 'en' | 'de',
    placeNamePut: PlaceNamePut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/name/${language}`,
      placeNamePut,options
    );
  }



export const getPlaceNamePutMutationOptions = <TError = AxiosError<PlaceNamePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeNamePut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceNamePut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeNamePut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceNamePut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeNamePut>>, {placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceNamePut}> = (props) => {
          const {placeId,language,data} = props ?? {};

          return  placeNamePut(placeId,language,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceNamePutMutationResult = NonNullable<Awaited<ReturnType<typeof placeNamePut>>>
    export type PlaceNamePutMutationBody = PlaceNamePut
    export type PlaceNamePutMutationError = AxiosError<PlaceNamePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary name - update
 */
export const usePlaceNamePut = <TError = AxiosError<PlaceNamePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeNamePut>>, TError,{placeId: string;language: 'nl' | 'fr' | 'en' | 'de';data: PlaceNamePut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceNamePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Deletes the organizer of the place with the given `placeId`.
 * @summary organizer - delete
 */
export const placeOrganizerDelete = (
    placeId: string,
    organizerId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/organizer/${organizerId}`,options
    );
  }



export const getPlaceOrganizerDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerDelete>>, TError,{placeId: string;organizerId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerDelete>>, TError,{placeId: string;organizerId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrganizerDelete>>, {placeId: string;organizerId: string}> = (props) => {
          const {placeId,organizerId} = props ?? {};

          return  placeOrganizerDelete(placeId,organizerId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceOrganizerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrganizerDelete>>>
    
    export type PlaceOrganizerDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary organizer - delete
 */
export const usePlaceOrganizerDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerDelete>>, TError,{placeId: string;organizerId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceOrganizerDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the organizer of the place with the given `placeId`. A list of organizers can be found using our [guide about finding existing organizers](/docs/entry-api/organizers/finding-and-reusing-organizers.md).

<!-- theme: info -->

> An organizer is not required on a place, and it can only have one.
 * @summary organizer - update
 */
export const placeOrganizerUpdate = (
    placeId: string,
    organizerId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/organizer/${organizerId}`,undefined,options
    );
  }



export const getPlaceOrganizerUpdateMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerUpdate>>, TError,{placeId: string;organizerId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerUpdate>>, TError,{placeId: string;organizerId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrganizerUpdate>>, {placeId: string;organizerId: string}> = (props) => {
          const {placeId,organizerId} = props ?? {};

          return  placeOrganizerUpdate(placeId,organizerId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceOrganizerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrganizerUpdate>>>
    
    export type PlaceOrganizerUpdateMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary organizer - update
 */
export const usePlaceOrganizerUpdate = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrganizerUpdate>>, TError,{placeId: string;organizerId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceOrganizerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the price info of a place.
 * @summary priceInfo - update
 */
export const placePriceInfoPut = (
    placeId: string,
    placePriceInfo: PlacePriceInfo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/price-info`,
      placePriceInfo,options
    );
  }



export const getPlacePriceInfoPutMutationOptions = <TError = AxiosError<PlacePriceInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePriceInfoPut>>, TError,{placeId: string;data: PlacePriceInfo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placePriceInfoPut>>, TError,{placeId: string;data: PlacePriceInfo}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placePriceInfoPut>>, {placeId: string;data: PlacePriceInfo}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placePriceInfoPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlacePriceInfoPutMutationResult = NonNullable<Awaited<ReturnType<typeof placePriceInfoPut>>>
    export type PlacePriceInfoPutMutationBody = PlacePriceInfo
    export type PlacePriceInfoPutMutationError = AxiosError<PlacePriceInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary priceInfo - update
 */
export const usePlacePriceInfoPut = <TError = AxiosError<PlacePriceInfoPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placePriceInfoPut>>, TError,{placeId: string;data: PlacePriceInfo}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlacePriceInfoPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the status on the top level of the place with the given `placeId`.
 * @summary status - update
 */
export const placeStatusPut = (
    placeId: string,
    placeStatus: PlaceStatus, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/status`,
      placeStatus,options
    );
  }



export const getPlaceStatusPutMutationOptions = <TError = AxiosError<PlaceStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeStatusPut>>, TError,{placeId: string;data: PlaceStatus}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeStatusPut>>, TError,{placeId: string;data: PlaceStatus}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeStatusPut>>, {placeId: string;data: PlaceStatus}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeStatusPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceStatusPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeStatusPut>>>
    export type PlaceStatusPutMutationBody = PlaceStatus
    export type PlaceStatusPutMutationError = AxiosError<PlaceStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary status - update
 */
export const usePlaceStatusPut = <TError = AxiosError<PlaceStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeStatusPut>>, TError,{placeId: string;data: PlaceStatus}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceStatusPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the place's type (examples of types are `Bioscoop`, `Monument`, `Theater`, and so on) based on the given `placeId` and `termId`.

Terms are pre-defined and can be found using our [guide about taxonomy terms](../docs/taxonomy-api/terms.md). Only terms from the `eventtype` domain can be used as place types.

If the `placeId` does not exist a `404 Not Found` will be returned. If the `termId` does not exist or is not a term in the `eventtype` domain, a `400 Bad Request` will be returned. If the request is successful a `204 No Content` will be returned.
 * @summary type - update
 */
export const placeTypePut = (
    placeId: string,
    termId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/type/${termId}`,undefined,options
    );
  }



export const getPlaceTypePutMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypePut>>, TError,{placeId: string;termId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeTypePut>>, TError,{placeId: string;termId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeTypePut>>, {placeId: string;termId: string}> = (props) => {
          const {placeId,termId} = props ?? {};

          return  placeTypePut(placeId,termId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceTypePutMutationResult = NonNullable<Awaited<ReturnType<typeof placeTypePut>>>
    
    export type PlaceTypePutMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary type - update
 */
export const usePlaceTypePut = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypePut>>, TError,{placeId: string;termId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceTypePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Deletes the age range from a place.
 * @summary typicalAgeRange - delete
 */
export const placeTypicalAgeRangeDelete = (
    placeId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/typical-age-range`,options
    );
  }



export const getPlaceTypicalAgeRangeDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangeDelete>>, TError,{placeId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangeDelete>>, TError,{placeId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeTypicalAgeRangeDelete>>, {placeId: string}> = (props) => {
          const {placeId} = props ?? {};

          return  placeTypicalAgeRangeDelete(placeId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceTypicalAgeRangeDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeTypicalAgeRangeDelete>>>
    
    export type PlaceTypicalAgeRangeDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary typicalAgeRange - delete
 */
export const usePlaceTypicalAgeRangeDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangeDelete>>, TError,{placeId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceTypicalAgeRangeDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the age range of the place with the given `placeId`.
 * @summary typicalAgeRange - update
 */
export const placeTypicalAgeRangePut = (
    placeId: string,
    placeTypicalAgeRangePut: PlaceTypicalAgeRangePut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/typical-age-range`,
      placeTypicalAgeRangePut,options
    );
  }



export const getPlaceTypicalAgeRangePutMutationOptions = <TError = AxiosError<PlaceTypicalAgeRangePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangePut>>, TError,{placeId: string;data: PlaceTypicalAgeRangePut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangePut>>, TError,{placeId: string;data: PlaceTypicalAgeRangePut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeTypicalAgeRangePut>>, {placeId: string;data: PlaceTypicalAgeRangePut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeTypicalAgeRangePut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceTypicalAgeRangePutMutationResult = NonNullable<Awaited<ReturnType<typeof placeTypicalAgeRangePut>>>
    export type PlaceTypicalAgeRangePutMutationBody = PlaceTypicalAgeRangePut
    export type PlaceTypicalAgeRangePutMutationError = AxiosError<PlaceTypicalAgeRangePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary typicalAgeRange - update
 */
export const usePlaceTypicalAgeRangePut = <TError = AxiosError<PlaceTypicalAgeRangePut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeTypicalAgeRangePut>>, TError,{placeId: string;data: PlaceTypicalAgeRangePut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceTypicalAgeRangePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Add a video as a URL reference to place

The video objects contains:

* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.
* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.
 * @summary videos - add
 */
export const placeVideosPost = (
    placeId: string,
    placeVideosPost: PlaceVideosPost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaceVideosPost200>> => {
    
    return axios.post(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/videos`,
      placeVideosPost,options
    );
  }



export const getPlaceVideosPostMutationOptions = <TError = AxiosError<PlaceVideosPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeVideosPost>>, TError,{placeId: string;data: PlaceVideosPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeVideosPost>>, TError,{placeId: string;data: PlaceVideosPost}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeVideosPost>>, {placeId: string;data: PlaceVideosPost}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeVideosPost(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceVideosPostMutationResult = NonNullable<Awaited<ReturnType<typeof placeVideosPost>>>
    export type PlaceVideosPostMutationBody = PlaceVideosPost
    export type PlaceVideosPostMutationError = AxiosError<PlaceVideosPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary videos - add
 */
export const usePlaceVideosPost = <TError = AxiosError<PlaceVideosPost400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeVideosPost>>, TError,{placeId: string;data: PlaceVideosPost}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceVideosPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Update one or more videos of a place.

The video object(s) must contain

* `id`: The id of the video object to be changed.

The video object(s) can contain:

* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.
* `language`: The updated language of a video
* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.
 * @summary videos - patch
 */
export const placesVideosPatch = (
    placeId: string,
    placeVideosPatch: PlaceVideosPatch, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.patch(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/videos`,
      placeVideosPatch,options
    );
  }



export const getPlacesVideosPatchMutationOptions = <TError = AxiosError<PlacesVideosPatch400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placesVideosPatch>>, TError,{placeId: string;data: PlaceVideosPatch}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placesVideosPatch>>, TError,{placeId: string;data: PlaceVideosPatch}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placesVideosPatch>>, {placeId: string;data: PlaceVideosPatch}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placesVideosPatch(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlacesVideosPatchMutationResult = NonNullable<Awaited<ReturnType<typeof placesVideosPatch>>>
    export type PlacesVideosPatchMutationBody = PlaceVideosPatch
    export type PlacesVideosPatchMutationError = AxiosError<PlacesVideosPatch400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary videos - patch
 */
export const usePlacesVideosPatch = <TError = AxiosError<PlacesVideosPatch400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placesVideosPatch>>, TError,{placeId: string;data: PlaceVideosPatch}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlacesVideosPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete an embedded video from an place based on the place id and the video id.
 * @summary videos - delete
 */
export const placeVideosDelete = (
    placeId: string,
    videoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/videos/${videoId}`,options
    );
  }



export const getPlaceVideosDeleteMutationOptions = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeVideosDelete>>, TError,{placeId: string;videoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeVideosDelete>>, TError,{placeId: string;videoId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeVideosDelete>>, {placeId: string;videoId: string}> = (props) => {
          const {placeId,videoId} = props ?? {};

          return  placeVideosDelete(placeId,videoId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceVideosDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof placeVideosDelete>>>
    
    export type PlaceVideosDeleteMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary videos - delete
 */
export const usePlaceVideosDelete = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeVideosDelete>>, TError,{placeId: string;videoId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceVideosDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Updates the workflow status of an place. Possible statuses are:

- `DRAFT`: The default status of new places. Places with this status do not appear in online calendars like <https://www.uitinvlaanderen.be> or the search on <https://www.uitdatabank.be>
- `READY_FOR_VALIDATION`: This status means the place has been published, but not approved yet. Most online calendars will already show it, and it will appear in the search on <https://www.uitdatabank.be>
- `APPROVED`: The place has been approved by a moderator. It will appear on all online calendars. You cannot set this status unless you have moderation permissions.
- `REJECTED`: The place has been rejected by a moderator. It will not appear on any online calendars. You cannot set this status unless you have moderation permissions.
- `DELETED`: The place has been deleted. It will not appear on any online calendars.
 * @summary workflowStatus - update
 */
export const placeWorkflowStatusPut = (
    placeId: string,
    placeWorkflowStatusPut: PlaceWorkflowStatusPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `NEXT_PUBLIC_ENTRY_API_PATH/places/${placeId}/workflow-status`,
      placeWorkflowStatusPut,options
    );
  }



export const getPlaceWorkflowStatusPutMutationOptions = <TError = AxiosError<PlaceWorkflowStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeWorkflowStatusPut>>, TError,{placeId: string;data: PlaceWorkflowStatusPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof placeWorkflowStatusPut>>, TError,{placeId: string;data: PlaceWorkflowStatusPut}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeWorkflowStatusPut>>, {placeId: string;data: PlaceWorkflowStatusPut}> = (props) => {
          const {placeId,data} = props ?? {};

          return  placeWorkflowStatusPut(placeId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PlaceWorkflowStatusPutMutationResult = NonNullable<Awaited<ReturnType<typeof placeWorkflowStatusPut>>>
    export type PlaceWorkflowStatusPutMutationBody = PlaceWorkflowStatusPut
    export type PlaceWorkflowStatusPutMutationError = AxiosError<PlaceWorkflowStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>

    /**
 * @summary workflowStatus - update
 */
export const usePlaceWorkflowStatusPut = <TError = AxiosError<PlaceWorkflowStatusPut400 | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeWorkflowStatusPut>>, TError,{placeId: string;data: PlaceWorkflowStatusPut}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPlaceWorkflowStatusPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    